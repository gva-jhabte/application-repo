"""
CVES_WITH_EXPLOITS

Load the two separate lists of CVEs with exploits into one list.

There should be a lot of overlap, so we're going to dedupe the
resultant list.
"""
from gva.data.formats import dictset
from gva.data import Reader
from gva.utils.common import build_context
from gva.data.validator import Schema
from gva.flows.operators import SaveToBucketOperator, EndOperator
import datetime


def build_flow(context: dict):

    # define the operations in the flow
    save_to_bucket = SaveToBucketOperator(
            project=context['config'].get('target_project'),
            to_path=context['config'].get('target_path'),
            schema=Schema(context),
            date=context.get('date'),
            compress=context['config'].get('compress'))
    end = EndOperator()

    # chain the operations to create the flow
    flow = save_to_bucket > end

    # attach the writers
    flow.attach_writers(context['config'].get('writers', []))

    return flow


def create_data_reader(project, from_path, date):
    reader = Reader(
            project=project,
            from_path=from_path,
            date_range=(date, date))
    return reader


def iterate_through_readers(context: dict = {}):
    # we're appending a set of data sources together, so rather than
    # write code to do that, read the sources from config and treat
    # all the feeds the same.
    for source in context['config'].get('sources'):
        reader = create_data_reader(
                source.get('source_project'),
                source.get('source_path'),
                context.get('date', datetime.datetime.today()))
        yield from reader


def main(context: dict = {}):
    # create the run context from the config and context passed to main
    # this would allow dates etc to be passed from something external
    context = build_context(**context)
    flow = build_flow(context)

    # load the readers from the config
    reader = iterate_through_readers(context)
    # we're only interested in the CVE column
    reader = dictset.select_from(reader, columns=['CVE'])
    # we only want to see each CVE once
    reader = dictset.distinct(reader)

    for line in reader:
        flow.run(
                data=line,
                context=context,
                trace_sample_rate=context['config'].get('sample_rate'))


if __name__ == "__main__":
    context = {}
    context['config_file'] = 'CVES_WITH_EXPLOITS.metadata'
    main(context)
